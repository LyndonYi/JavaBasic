异常处理机制的基本定义
   
                        异常类的处理
                        程序在运行时出现错误，会抛出异常，因此通常直接将运行时的的错误称为异常。当异常产生时，意味着程序的正常执行流程会中断，
       如果程序不进行对异常的处理，这会导致程序的运行非正常终止。因此要对可能出现的异常进行相应的处理。
       如果不进行异常处理，则当程序出现错误时，这时会使整一个程序无法继续下去，这是由于虚拟机的安全机制负责的。
       异常分为两种，第一种是致命的，称为：Error 类，这一类是灾难性的，主要讨论一下第二种是非致命类的异常：称为 Exception类 
exception 和Error都是Throwable的子类，子类覆盖了父类的方法，又同时定义了自己方法；而exception 和Error的子类也是如此。
异常处理的原理：
1:
当主函数中定义了异常处理方式时，则不用交给虚拟机处理。  这也足够体现出JAVA具有的安全性。
2：
 try（）
 {
       要检测的代码块？判断其是否有问题
 } 
 
          如果有问题，则将他丢给下面这个捕获问题的方法
          也就是说：如果按照顺序找到一个与try块中抛出的异常相匹配的catch块，就将该异常赋值给该catch快的异常参数，并开始执行catch快中的异常处理代码
 
 catch（）//那么catch是怎么捕获的呢？ArithmeticException是运算问题集，将运算错误的问题进行封装，
          //他继承于Exception类 
          //所以catch的捕获方法是吸收一个 ArithmeiticException对象，表达式为：
              Exception e=new ArithmeticException(),然后通过对ArithmeiticException类里面的
                                         方法（输出错误的信息）：
               get.Message, toString,printStackTrace(输出更加全面的错误信息)，也可以覆盖方法
 {
   e.getMessage（）
   e.toString（）
  e.printStackTrace（）
  }
 
 通过Throws 来声明被调用的函数可能存在着问题（声明出去），如果不处理这个被调用的函数就不给调用，
     有两种方法可以进行处理:捕捉,声明出去（给虚拟机） 
  throws 定义在函数外
  throw 定义在函数内   

