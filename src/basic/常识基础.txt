
	1：必须要有主函数作为程序的入口，不然不能执行：
			   class Cat
			   {
			  		int age;
			  		int weight;
			  		void meow()
			  		{
			  			System.out.println();
			  		}
			这是因为 这个类没有main方法，因此不能运行。不过可以使用它创建相应的对象。	 
			   }
			   
	2：system.out.println();语句要放在方法里面才能执行；
	
	3：引用也叫指向

	4：JAVA中没有向C C++那样的地址，JAVA是通过引用来实现指向的：定义了一个
	      Class A-->
	 		A a=new A()；这句话分为两个部分：
	              A a;//声明了一个对象引用（将要指向一个实际的对象（类）或者说是一个对象变量(类类型变量：就相当于int a=5,a是一个基本数据类型的变量)），但是这是还没有指向一个实际的对象
	              new A()//指向一个实际的对象,这个new出来的东西是指在堆中的东西
	 		A是放在堆中的，
	   		a是放在栈中的，是一个指向A的引用（不叫地址，但是跟C中的地址作用一样），类是一种引用数据类型，
	       		所谓的引用数据类型是指这种类型的变量总是指向对象内存实体地址，通过该对象引用可以间接访问相应的数据值，在JAVA中可以忽略对象名和对象引用名的区别，并将对象引用名称为对象名
	       并不会创建实际的对象，使用new运算符在堆中创建某个类的对象（也称为实例，创建对象也称为实例化）时，必须同时指定相应的构造方法，如果没有指定，系统会为其构造一个无参得默认构造方法
		而new A();是一个匿名的对象，没有变量名，程序中的其他语句无法访问它，即只能在创建匿名对象的同时访问其成员，如new A();9


	5:注意this关键字的运用。用于区分局部变量和成员变量的同名。this.name表示的是成员变量(对象的成员属性)，而定义在构造函数中的局变量赋给成员变量.


	6:JAVA中，不允许程序直接访问I/O设备，其设备（包括文件）的I/O操作是以流的形式实现的。
		所谓的流是一个抽象的概念，它可以表示任何有可能生产数据的数据源对象，或者有能力接受数据的接收端对象，而不是指字节，程序员可以把输入或者输出的数据看作是一个字节（字符）序列的数据流
		在JAVA中，文件和流也是对象，系统定义了大量的有关文件管理恶化流操作的类。  

	7:在一个类中，静态的属性或者是方法，是共享出去的，也就是说，该对象被其他对象调用时，不必通过new该对象可直接通过
	    对象名来调用其静态的东西，当被其他类继承时，自然就是共享到子类中。
	    
	 8：关于继承，如果A被B所继承，那么B不能继承或者说成是访问A中的私有化的成员，只能通过A提供的一个接口来访问其中的
	     成员。
	     
